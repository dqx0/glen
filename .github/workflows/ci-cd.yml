name: Glen ID Platform CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  GCP_PROJECT_ID: glen-465915
  GCP_REGION: asia-northeast1
  GKE_CLUSTER: glen-cluster
  GKE_ZONE: asia-northeast1-a

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glen_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd services/auth-service && go mod download
          cd ../user-service && go mod download
          cd ../social-service && go mod download
          cd ../api-gateway && go mod download

      - name: Run unit tests
        run: make test-unit
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: glen_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run integration tests
        run: make test-integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: glen_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Generate test coverage
        run: make test-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build Go binaries
        run: make build

      - name: Build frontend
        run: make frontend-build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker images
        run: |
          # Build and tag images with Docker Hub
          docker build -t $DOCKER_HUB_USERNAME/glen-auth-service:$GITHUB_SHA -f services/auth-service/Dockerfile services/auth-service
          docker build -t $DOCKER_HUB_USERNAME/glen-user-service:$GITHUB_SHA -f services/user-service/Dockerfile services/user-service
          docker build -t $DOCKER_HUB_USERNAME/glen-social-service:$GITHUB_SHA -f services/social-service/Dockerfile services/social-service
          docker build -t $DOCKER_HUB_USERNAME/glen-api-gateway:$GITHUB_SHA -f services/api-gateway/Dockerfile services/api-gateway
          docker build -t $DOCKER_HUB_USERNAME/glen-frontend:$GITHUB_SHA -f frontend/Dockerfile frontend \
            --build-arg VITE_API_URL=https://api.glen.dqx0.com \
            --build-arg VITE_APP_NAME="Glen ID Platform" \
            --build-arg VITE_WEBAUTHN_ENABLED=true

          # Push images
          docker push $DOCKER_HUB_USERNAME/glen-auth-service:$GITHUB_SHA
          docker push $DOCKER_HUB_USERNAME/glen-user-service:$GITHUB_SHA
          docker push $DOCKER_HUB_USERNAME/glen-social-service:$GITHUB_SHA
          docker push $DOCKER_HUB_USERNAME/glen-api-gateway:$GITHUB_SHA
          docker push $DOCKER_HUB_USERNAME/glen-frontend:$GITHUB_SHA

          # Tag as latest
          docker tag $DOCKER_HUB_USERNAME/glen-auth-service:$GITHUB_SHA $DOCKER_HUB_USERNAME/glen-auth-service:latest
          docker tag $DOCKER_HUB_USERNAME/glen-user-service:$GITHUB_SHA $DOCKER_HUB_USERNAME/glen-user-service:latest
          docker tag $DOCKER_HUB_USERNAME/glen-social-service:$GITHUB_SHA $DOCKER_HUB_USERNAME/glen-social-service:latest
          docker tag $DOCKER_HUB_USERNAME/glen-api-gateway:$GITHUB_SHA $DOCKER_HUB_USERNAME/glen-api-gateway:latest
          docker tag $DOCKER_HUB_USERNAME/glen-frontend:$GITHUB_SHA $DOCKER_HUB_USERNAME/glen-frontend:latest

          docker push $DOCKER_HUB_USERNAME/glen-auth-service:latest
          docker push $DOCKER_HUB_USERNAME/glen-user-service:latest
          docker push $DOCKER_HUB_USERNAME/glen-social-service:latest
          docker push $DOCKER_HUB_USERNAME/glen-api-gateway:latest
          docker push $DOCKER_HUB_USERNAME/glen-frontend:latest

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud project
        run: gcloud config set project glen-465915

      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials glen-cluster --zone asia-northeast1-a --project glen-465915

      - name: Deploy to Kubernetes
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          # Update image tags in deployment files for Docker Hub
          sed -i "s|DOCKER_HUB_USERNAME/glen-auth-service:latest|$DOCKER_HUB_USERNAME/glen-auth-service:$GITHUB_SHA|g" infrastructure/k8s/auth-service-deployment.yaml
          sed -i "s|DOCKER_HUB_USERNAME/glen-user-service:latest|$DOCKER_HUB_USERNAME/glen-user-service:$GITHUB_SHA|g" infrastructure/k8s/user-service-deployment.yaml
          sed -i "s|DOCKER_HUB_USERNAME/glen-social-service:latest|$DOCKER_HUB_USERNAME/glen-social-service:$GITHUB_SHA|g" infrastructure/k8s/social-service-deployment.yaml
          sed -i "s|DOCKER_HUB_USERNAME/glen-api-gateway:latest|$DOCKER_HUB_USERNAME/glen-api-gateway:$GITHUB_SHA|g" infrastructure/k8s/api-gateway-deployment.yaml
          sed -i "s|DOCKER_HUB_USERNAME/glen-frontend:latest|$DOCKER_HUB_USERNAME/glen-frontend:$GITHUB_SHA|g" infrastructure/k8s/frontend-deployment.yaml

          # Generate ConfigMap with actual IPs from secrets
          cp infrastructure/k8s/configmap.template.yaml infrastructure/k8s/configmap.yaml
          sed -i "s|REPLACE_DB_HOST|${{ secrets.DB_HOST }}|g" infrastructure/k8s/configmap.yaml
          sed -i "s|REPLACE_REDIS_HOST|${{ secrets.REDIS_HOST }}|g" infrastructure/k8s/configmap.yaml

          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/k8s/

      - name: Wait for deployment to complete
        run: |
          kubectl rollout status deployment/glen-auth-service -n glen-system
          kubectl rollout status deployment/glen-user-service -n glen-system
          kubectl rollout status deployment/glen-social-service -n glen-system
          kubectl rollout status deployment/glen-api-gateway -n glen-system
          kubectl rollout status deployment/glen-frontend -n glen-system

      - name: Verify deployment
        run: |
          kubectl get pods -n glen-system
          kubectl get services -n glen-system
          kubectl get ingress -n glen-system

      - name: Run health checks
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Get service URLs and run health checks
          API_GATEWAY_URL=$(kubectl get service glen-api-gateway-service -n glen-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$API_GATEWAY_URL" ]; then
            curl -f http://$API_GATEWAY_URL/health || exit 1
          fi
