name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Run Govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          cd services/auth-service && govulncheck ./...
          cd ../user-service && govulncheck ./...
          cd ../social-service && govulncheck ./...
          cd ../api-gateway && govulncheck ./...

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run npm audit
        working-directory: frontend
        run: npm audit --audit-level=high

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secret-results.sarif'
          scanners: 'secret'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-secret-results.sarif') != ''
        with:
          sarif_file: 'trivy-secret-results.sarif'

  docker-scan:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [auth-service, user-service, social-service, api-gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t glen-${{ matrix.service }}:latest -f services/${{ matrix.service }}/Dockerfile services/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'glen-${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-${{ matrix.service }}-results.sarif') != ''
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

  frontend-docker-scan:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Build Docker image
        run: |
          docker build -t glen-frontend:latest -f frontend/Dockerfile frontend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'glen-frontend:latest'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-frontend-results.sarif') != ''
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install gosec
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        run: |
          cd services/auth-service && gosec -fmt sarif -out ../../gosec-auth-results.sarif ./...
          cd ../user-service && gosec -fmt sarif -out ../../gosec-user-results.sarif ./...
          cd ../social-service && gosec -fmt sarif -out ../../gosec-social-results.sarif ./...
          cd ../api-gateway && gosec -fmt sarif -out ../../gosec-gateway-results.sarif ./...

      - name: Upload gosec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-auth-results.sarif') != ''
        with:
          sarif_file: 'gosec-auth-results.sarif'
          
      - name: Upload gosec user service results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-user-results.sarif') != ''
        with:
          sarif_file: 'gosec-user-results.sarif'
          
      - name: Upload gosec social service results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-social-results.sarif') != ''
        with:
          sarif_file: 'gosec-social-results.sarif'
          
      - name: Upload gosec gateway results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-gateway-results.sarif') != ''
        with:
          sarif_file: 'gosec-gateway-results.sarif'

  license-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check Go licenses
        run: |
          cd services/auth-service && go-licenses check ./...
          cd ../user-service && go-licenses check ./...
          cd ../social-service && go-licenses check ./...
          cd ../api-gateway && go-licenses check ./...

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check frontend licenses
        working-directory: frontend
        run: |
          npm ci
          license-checker --summary

  security-report:
    needs: [dependency-scan, secret-scan, docker-scan, frontend-docker-scan, static-analysis, license-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Secret Scan: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Scan: ${{ needs.docker-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Docker Scan: ${{ needs.frontend-docker-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Static Analysis: ${{ needs.static-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### License Scan: ${{ needs.license-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.dependency-scan.result }}" != "success" ] || 
             [ "${{ needs.secret-scan.result }}" != "success" ] || 
             [ "${{ needs.docker-scan.result }}" != "success" ] || 
             [ "${{ needs.frontend-docker-scan.result }}" != "success" ] || 
             [ "${{ needs.static-analysis.result }}" != "success" ] || 
             [ "${{ needs.license-scan.result }}" != "success" ]; then
            echo "❌ Security scan failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All security scans passed" >> $GITHUB_STEP_SUMMARY
          fi